import { ITypedNode, TypedNode } from './TypedNode';
import { ITypedEdge, TypedEdgeConfig } from "./TypedEdge";
import { IBaseEdge } from "../base/BaseEdge";
import { BaseGraph } from '../base/BaseGraph';
import { DIR, ExpansionInput, ExpansionConfig, ExpansionResult, TypedGraphStats, TypedEdges, TypedNodes } from '../interfaces';
export declare class TypedGraph extends BaseGraph {
    _label: string;
    protected _type: string;
    protected _typedNodes: TypedNodes;
    protected _typedEdges: TypedEdges;
    constructor(_label: string);
    n(id: string): TypedNode;
    readonly type: string;
    nodeTypes(): string[];
    edgeTypes(): string[];
    nrTypedNodes(type: string): number | null;
    nrTypedEdges(type: string): number | null;
    ins(node: ITypedNode, type: string): Set<ITypedNode>;
    outs(node: ITypedNode, type: string): Set<ITypedNode>;
    unds(node: ITypedNode, type: string): Set<ITypedNode>;
    private convertInputForExpansion;
    expand(input: ExpansionInput, dir: DIR, type: string): ExpansionResult;
    expandK(input: ExpansionInput, dir: DIR, type: string, cfg?: ExpansionConfig): ExpansionResult;
    peripheryAtK(input: ExpansionInput, dir: DIR, type: string, cfg?: ExpansionConfig): ExpansionResult;
    inHistT(nType: string, eType: string): Set<number>[];
    outHistT(nType: string, eType: string): Set<number>[];
    connHistT(nType: string, eType: string): Set<number>[];
    private degreeHistT;
    addNodeByID(id: string, opts?: {}): ITypedNode;
    addNode(node: ITypedNode): ITypedNode;
    getNodeById(id: string): TypedNode;
    getNodesT(type: string): Map<string, ITypedNode>;
    getEdgesT(type: string): Map<string, ITypedEdge>;
    deleteNode(node: ITypedNode): void;
    addEdgeByID(id: string, a: ITypedNode, b: ITypedNode, opts?: TypedEdgeConfig): ITypedEdge;
    addEdge(edge: ITypedEdge | IBaseEdge): ITypedEdge;
    deleteEdge(edge: ITypedEdge | IBaseEdge): void;
    getStats(): TypedGraphStats;
}
